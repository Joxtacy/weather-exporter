name: Build and Test

on:
  push:
    branches: [main, master]
    tags:
      - "v*"
  pull_request:
    branches: [main, master]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Cache target
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Build debug
        run: cargo build --verbose

  build-binaries:
    name: Build - ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        platform:
          # Linux builds
          - name: linux-amd64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: weather-exporter
            command: build

          - name: linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin: weather-exporter
            command: build

          - name: linux-armv7
            os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            bin: weather-exporter
            command: build

          # Windows builds
          - name: windows-amd64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: weather-exporter.exe
            command: build

          # macOS builds
          - name: macos-amd64
            os: macos-latest
            target: x86_64-apple-darwin
            bin: weather-exporter
            command: build

          - name: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin
            bin: weather-exporter
            command: build

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install cross-compilation tools
        if: matrix.platform.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install cross-compilation tools for ARMv7
        if: matrix.platform.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf libssl-dev:armhf pkg-config

      - name: Install cross-compilation tools for ARM64
        if: matrix.platform.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev:arm64 pkg-config

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.platform.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform.target }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.platform.target }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform.target }}-cargo-git-

      - name: Cache target
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.platform.target }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform.target }}-cargo-target-

      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: ${{ matrix.platform.command }}
          target: ${{ matrix.platform.target }}
          args: "--release"
          strip: true

      - name: Package binary
        shell: bash
        run: |
          cd target/${{ matrix.platform.target }}/release
          if [ "${{ matrix.platform.os }}" = "windows-latest" ]; then
            7z a ../../../weather-exporter-${{ matrix.platform.name }}.zip ${{ matrix.platform.bin }}
          else
            tar czf ../../../weather-exporter-${{ matrix.platform.name }}.tar.gz ${{ matrix.platform.bin }}
          fi
          cd -

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: weather-exporter-${{ matrix.platform.name }}
          path: weather-exporter-${{ matrix.platform.name }}.*
          if-no-files-found: error
          retention-days: 7

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      packages: write
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            joxtacy/weather-exporter
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-binaries, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: ls -la artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          files: |
            artifacts/weather-exporter-*/*
          generate_release_notes: true
          body: |
            ## Weather Exporter Release

            ### Installation

            Download the appropriate binary for your platform below.

            #### Docker
            ```bash
            docker pull joxtacy/weather-exporter:${{ github.ref_name }}
            docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ```

            #### Binary Installation
            ```bash
            # Linux/macOS
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/weather-exporter-linux-amd64.tar.gz | tar xz
            chmod +x weather-exporter
            ./weather-exporter "Oslo, Stockholm"

            # Windows
            # Download the .zip file and extract weather-exporter.exe
            ```

            ### What's Changed
            See the full changelog below.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
